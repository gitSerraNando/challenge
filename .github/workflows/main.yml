name: CI/CD Workflow

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SQLALCHEMY_DATABASE_URL: ${{ secrets.SQLALCHEMY_DATABASE_URL }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
      GOOGLE_APPLICATION_CREDENTIALS: 'google/mide-lo-que-importa-279017-597087d55355.json'

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install Poetry
      run: |
        pip install poetry

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create false

    - name: Install dependencies
      run: |
        poetry install --no-dev


    - name: Decode Google Cloud Credentials
      run: |
          echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" | base64 -d > ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
      
    - name: Show path of credentials file
      run: |
        echo "Credentials file path: $GOOGLE_APPLICATION_CREDENTIALS"

    - name: Run tests
      run: |
        poetry run pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      IMAGE: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/callenge/challenge:${{ github.sha }}
      SERVICE_NAME: challenge-service
      REGION: us-central1


    steps:
    - uses: actions/checkout@v2

    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Extract filename
      run: |
          FILENAME=$(basename $GOOGLE_APPLICATION_CREDENTIALS)
          echo "FILENAME=$FILENAME" >> $GITHUB_ENV      
     

    - name: Configure Docker to use the gcloud command-line tool as a credential helper
      run: |
          gcloud auth configure-docker \
          us-central1-docker.pkg.dev -q

    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.IMAGE }} .
        docker push ${{ env.IMAGE }}

    - name: Deploy to Google Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
        --image ${{ env.IMAGE }} \
        --platform managed \
        --region ${{ env.REGION }} \
        --allow-unauthenticated \
        --set-env-vars SQLALCHEMY_DATABASE_URL=${{ secrets.SQLALCHEMY_DATABASE_URL }},SECRET_KEY=${{ secrets.SECRET_KEY }},ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }},GOOGLE_APPLICATION_CREDENTIALS=$FILENAME
    
    
